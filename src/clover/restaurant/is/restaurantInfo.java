/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package clover.restaurant.is;

import java.awt.Color;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.SwingConstants;

/**
 * Author : Sampanna Pokharel, Sandesh Bhurtyal, Umesh Shahu Shrestha Date
 * Created : 12/28/2021 Last Modified : 01/10/2022
 */
public class restaurantInfo extends javax.swing.JFrame {

    // Declaring Instance Variable
    String Rating = "";

    public restaurantInfo() {
        initComponents();

        // Arranging rows in ascending or descending when colum header is pressed
        table_restaurantDetails.setAutoCreateRowSorter(true);

        // Disabling menu items on application load (login page)
        menuItem_Open.setEnabled(false);
        menuItem_Save.setEnabled(false);

        // Setting the lables of invalid user and password to invisible
        login_InvalidUsername.setVisible(false);
        login_InvalidPassword.setVisible(false);

        // Setting undisplayed panels as invisible
        panel_addRecords.setVisible(false);
        panel_viewRecords.setVisible(false);

        // Buttons disabled until user logs in
        button_loadRecords.setEnabled(false);
        button_LoadInformation.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_addRating = new javax.swing.ButtonGroup();
        jMenuItem1 = new javax.swing.JMenuItem();
        panel_Container = new javax.swing.JPanel();
        panel_Menu = new javax.swing.JPanel();
        button_loadRecords = new javax.swing.JButton();
        button_LoadInformation = new javax.swing.JButton();
        button_loadLogin = new javax.swing.JButton();
        jTabbedPane = new javax.swing.JTabbedPane();
        panel_Login = new javax.swing.JPanel();
        subPanel_Login = new javax.swing.JPanel();
        field_Password = new javax.swing.JTextField();
        field_Username = new javax.swing.JTextField();
        button_Login = new javax.swing.JButton();
        label_loginDescription = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        login_InvalidUsername = new javax.swing.JLabel();
        login_InvalidPassword = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        panel_addRecords = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_restaurantDetails = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        label_addExpenses = new javax.swing.JLabel();
        field_addID = new javax.swing.JTextField();
        label_addID = new javax.swing.JLabel();
        field_addLocation = new javax.swing.JTextField();
        label_addLocation1 = new javax.swing.JLabel();
        field_addExpenses = new javax.swing.JTextField();
        label_addIncome = new javax.swing.JLabel();
        field_addIncome = new javax.swing.JTextField();
        label_addRating = new javax.swing.JLabel();
        radio_add1Star = new javax.swing.JRadioButton();
        radio_add2Star = new javax.swing.JRadioButton();
        radio_add3Star = new javax.swing.JRadioButton();
        radio_add4Star = new javax.swing.JRadioButton();
        radio_add5Star = new javax.swing.JRadioButton();
        label_addCuisine = new javax.swing.JLabel();
        combo_addCuisine = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        button_addToTable1 = new javax.swing.JButton();
        button_clearFields = new javax.swing.JButton();
        button_export = new javax.swing.JButton();
        panel_viewRecords = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        label_reportTitle = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_report = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        field_searchProfit = new javax.swing.JTextField();
        button_searchProfit = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        combo_searchCuisine = new javax.swing.JComboBox<>();
        button_searchCuisine = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        button_generateReport = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_File = new javax.swing.JMenu();
        menuItem_Save = new javax.swing.JMenuItem();
        menuItem_Open = new javax.swing.JMenuItem();
        menuItem_Exit = new javax.swing.JMenuItem();
        menu_Help = new javax.swing.JMenu();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Clover Restaurant IS");
        setBackground(new java.awt.Color(102, 255, 204));
        setLocation(new java.awt.Point(200, 100));
        setName("restaurantInfo"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1000, 630));
        setResizable(false);

        panel_Container.setBackground(new java.awt.Color(51, 51, 51));
        panel_Container.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel_Menu.setBackground(new java.awt.Color(102, 102, 102));
        panel_Menu.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        button_loadRecords.setBackground(new java.awt.Color(0, 0, 0));
        button_loadRecords.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        button_loadRecords.setForeground(new java.awt.Color(204, 204, 204));
        button_loadRecords.setText("Records");
        button_loadRecords.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_loadRecordsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_loadRecordsMouseExited(evt);
            }
        });
        button_loadRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_loadRecordsActionPerformed(evt);
            }
        });

        button_LoadInformation.setBackground(new java.awt.Color(0, 0, 0));
        button_LoadInformation.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        button_LoadInformation.setForeground(new java.awt.Color(204, 204, 204));
        button_LoadInformation.setText("Information");
        button_LoadInformation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_LoadInformationMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_LoadInformationMouseExited(evt);
            }
        });
        button_LoadInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_LoadInformationActionPerformed(evt);
            }
        });

        button_loadLogin.setBackground(new java.awt.Color(0, 0, 0));
        button_loadLogin.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        button_loadLogin.setForeground(new java.awt.Color(204, 204, 204));
        button_loadLogin.setText("Login");
        button_loadLogin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_loadLoginMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_loadLoginMouseExited(evt);
            }
        });
        button_loadLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_loadLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_MenuLayout = new javax.swing.GroupLayout(panel_Menu);
        panel_Menu.setLayout(panel_MenuLayout);
        panel_MenuLayout.setHorizontalGroup(
            panel_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_MenuLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(panel_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(button_LoadInformation)
                    .addComponent(button_loadRecords, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_loadLogin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(4, 4, 4))
        );
        panel_MenuLayout.setVerticalGroup(
            panel_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_MenuLayout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(button_loadLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(button_loadRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(button_LoadInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panel_Container.add(panel_Menu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 120, 570));

        panel_Login.setBackground(new java.awt.Color(51, 51, 51));
        panel_Login.setPreferredSize(new java.awt.Dimension(1000, 620));

        subPanel_Login.setBackground(new java.awt.Color(255, 153, 102));
        subPanel_Login.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 204, 0), 5, true));
        subPanel_Login.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        field_Password.setBackground(new java.awt.Color(51, 51, 51));
        field_Password.setFont(new java.awt.Font("Trebuchet MS", 3, 22)); // NOI18N
        field_Password.setForeground(new java.awt.Color(255, 255, 255));
        field_Password.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        field_Password.setText("Enter Password");
        field_Password.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                field_PasswordFocusGained(evt);
            }
        });
        subPanel_Login.add(field_Password, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 127, 257, 36));

        field_Username.setBackground(new java.awt.Color(51, 51, 51));
        field_Username.setFont(new java.awt.Font("Trebuchet MS", 3, 22)); // NOI18N
        field_Username.setForeground(new java.awt.Color(255, 255, 255));
        field_Username.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        field_Username.setText("Enter Username");
        field_Username.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                field_UsernameFocusGained(evt);
            }
        });
        subPanel_Login.add(field_Username, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 46, 257, 36));

        button_Login.setBackground(new java.awt.Color(0, 0, 0));
        button_Login.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        button_Login.setForeground(new java.awt.Color(204, 204, 204));
        button_Login.setText("Login");
        button_Login.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button_LoginMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button_LoginMouseExited(evt);
            }
        });
        button_Login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_LoginActionPerformed(evt);
            }
        });
        subPanel_Login.add(button_Login, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 220, 190, 38));

        label_loginDescription.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        label_loginDescription.setText("Default username and password is admin");
        subPanel_Login.add(label_loginDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 280, -1, -1));

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 1, 22)); // NOI18N
        jLabel2.setText("Password");
        subPanel_Login.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 132, -1, -1));

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 1, 22)); // NOI18N
        jLabel3.setText("Username");
        subPanel_Login.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 51, -1, -1));

        login_InvalidUsername.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        login_InvalidUsername.setForeground(new java.awt.Color(204, 0, 0));
        login_InvalidUsername.setText("Invalid Username");
        subPanel_Login.add(login_InvalidUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(266, 88, -1, -1));

        login_InvalidPassword.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        login_InvalidPassword.setForeground(new java.awt.Color(204, 0, 0));
        login_InvalidPassword.setText("Invalid Password");
        subPanel_Login.add(login_InvalidPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 169, -1, -1));

        jLabel1.setFont(new java.awt.Font("Varsity Regular", 0, 55)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 255, 102));
        jLabel1.setText("Clover - Restaurant IS ");

        javax.swing.GroupLayout panel_LoginLayout = new javax.swing.GroupLayout(panel_Login);
        panel_Login.setLayout(panel_LoginLayout);
        panel_LoginLayout.setHorizontalGroup(
            panel_LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_LoginLayout.createSequentialGroup()
                .addContainerGap(139, Short.MAX_VALUE)
                .addGroup(panel_LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_LoginLayout.createSequentialGroup()
                        .addComponent(subPanel_Login, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(187, 187, 187))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_LoginLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(121, 121, 121))))
        );
        panel_LoginLayout.setVerticalGroup(
            panel_LoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_LoginLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(subPanel_Login, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(131, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Login", panel_Login);

        panel_addRecords.setBackground(new java.awt.Color(51, 51, 51));
        panel_addRecords.setPreferredSize(new java.awt.Dimension(1000, 610));
        panel_addRecords.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBackground(new java.awt.Color(51, 51, 51));
        jScrollPane1.setBorder(null);

        table_restaurantDetails.setAutoCreateRowSorter(true);
        table_restaurantDetails.setBackground(new java.awt.Color(51, 51, 51));
        table_restaurantDetails.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        table_restaurantDetails.setForeground(new java.awt.Color(255, 255, 255));
        table_restaurantDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Location", "Rating", "Cuisine", "Income", "Expenses", "Profit"
            }
        )
        {public boolean isCellEditable(int row, int column){return false;}}
    );
    table_restaurantDetails.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null}
        },
        new String [] {
            "ID", "Location", "Rating", "Cuisine", "Income", "Expenses", "Profit"
        }
    ));
    table_restaurantDetails.setAlignmentX(1.0F);
    table_restaurantDetails.setAlignmentY(1.0F);
    table_restaurantDetails.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    table_restaurantDetails.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
    table_restaurantDetails.setEnabled(false);
    table_restaurantDetails.setFocusable(false);
    table_restaurantDetails.setGridColor(new java.awt.Color(255, 255, 255));
    table_restaurantDetails.setIntercellSpacing(new java.awt.Dimension(0, 0));
    table_restaurantDetails.setRequestFocusEnabled(false);
    table_restaurantDetails.setRowHeight(26);
    table_restaurantDetails.setShowGrid(true);
    table_restaurantDetails.setShowVerticalLines(false);
    table_restaurantDetails.getTableHeader().setReorderingAllowed(false);
    jScrollPane1.setViewportView(table_restaurantDetails);

    panel_addRecords.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 848, 340));

    jPanel1.setBackground(new java.awt.Color(255, 153, 102));
    jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
    jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

    label_addExpenses.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    label_addExpenses.setText("Expenses");
    jPanel1.add(label_addExpenses, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 59, -1));

    field_addID.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    jPanel1.add(field_addID, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 160, -1));

    label_addID.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    label_addID.setText("ID");
    jPanel1.add(label_addID, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, 26));

    field_addLocation.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    jPanel1.add(field_addLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 160, -1));

    label_addLocation1.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    label_addLocation1.setText("Location");
    jPanel1.add(label_addLocation1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, 30));

    field_addExpenses.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    jPanel1.add(field_addExpenses, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 170, 160, -1));

    label_addIncome.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    label_addIncome.setText("Income");
    label_addIncome.setToolTipText("");
    jPanel1.add(label_addIncome, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, 47));

    field_addIncome.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    jPanel1.add(field_addIncome, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 120, 160, -1));

    label_addRating.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    label_addRating.setText("Rating");
    jPanel1.add(label_addRating, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, 63, -1));

    radio_add1Star.setBackground(new java.awt.Color(255, 255, 255));
    buttonGroup_addRating.add(radio_add1Star);
    radio_add1Star.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    radio_add1Star.setText("1 Star");
    radio_add1Star.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            radio_add1StarActionPerformed(evt);
        }
    });
    jPanel1.add(radio_add1Star, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 50, 68, -1));

    buttonGroup_addRating.add(radio_add2Star);
    radio_add2Star.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    radio_add2Star.setText("2 Star");
    radio_add2Star.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            radio_add2StarActionPerformed(evt);
        }
    });
    jPanel1.add(radio_add2Star, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, 68, -1));

    buttonGroup_addRating.add(radio_add3Star);
    radio_add3Star.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    radio_add3Star.setText("3 Star");
    radio_add3Star.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            radio_add3StarActionPerformed(evt);
        }
    });
    jPanel1.add(radio_add3Star, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 110, 68, -1));

    buttonGroup_addRating.add(radio_add4Star);
    radio_add4Star.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    radio_add4Star.setText("4 Star");
    radio_add4Star.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            radio_add4StarActionPerformed(evt);
        }
    });
    jPanel1.add(radio_add4Star, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 140, 68, -1));

    buttonGroup_addRating.add(radio_add5Star);
    radio_add5Star.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    radio_add5Star.setText("5 Star");
    radio_add5Star.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            radio_add5StarActionPerformed(evt);
        }
    });
    jPanel1.add(radio_add5Star, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 170, 68, -1));

    label_addCuisine.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    label_addCuisine.setText("Cuisine");
    jPanel1.add(label_addCuisine, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, -1, -1));

    combo_addCuisine.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    combo_addCuisine.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select Cuisine-", "Chinese", "French", "Italian", "Japanese", "Indian", "Continental", "Nepalese" }));
    jPanel1.add(combo_addCuisine, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 60, 150, -1));

    panel_addRecords.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 604, 215));

    jPanel2.setBackground(new java.awt.Color(255, 153, 102));
    jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
    jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

    button_addToTable1.setBackground(new java.awt.Color(0, 0, 0));
    button_addToTable1.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    button_addToTable1.setForeground(new java.awt.Color(204, 204, 204));
    button_addToTable1.setText("Add To Table");
    button_addToTable1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            button_addToTable1ActionPerformed(evt);
        }
    });
    jPanel2.add(button_addToTable1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 151, 35));

    button_clearFields.setBackground(new java.awt.Color(0, 0, 0));
    button_clearFields.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    button_clearFields.setForeground(new java.awt.Color(204, 204, 204));
    button_clearFields.setText("Clear Fields");
    button_clearFields.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            button_clearFieldsActionPerformed(evt);
        }
    });
    jPanel2.add(button_clearFields, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 151, 35));

    button_export.setBackground(new java.awt.Color(0, 0, 0));
    button_export.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    button_export.setForeground(new java.awt.Color(204, 204, 204));
    button_export.setText("Export");
    button_export.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            button_exportActionPerformed(evt);
        }
    });
    jPanel2.add(button_export, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, 151, 35));

    panel_addRecords.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 350, 226, 215));

    jTabbedPane.addTab("Add Records", panel_addRecords);

    panel_viewRecords.setBackground(new java.awt.Color(51, 51, 51));
    panel_viewRecords.setPreferredSize(new java.awt.Dimension(1000, 620));

    jPanel3.setBackground(new java.awt.Color(153, 153, 153));
    jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

    label_reportTitle.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
    label_reportTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    label_reportTitle.setText("Report Here");

    list_report.setBackground(new java.awt.Color(153, 153, 153));
    list_report.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    list_report.setMaximumSize(new java.awt.Dimension(689, 150));
    jScrollPane2.setViewportView(list_report);

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap(52, Short.MAX_VALUE)
            .addComponent(label_reportTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 689, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(53, 53, 53))
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addGap(34, 34, 34)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 726, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(label_reportTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(36, Short.MAX_VALUE))
    );

    jPanel4.setBackground(new java.awt.Color(255, 153, 102));
    jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

    jLabel5.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
    jLabel5.setText("Search Based on Profit");

    field_searchProfit.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N

    button_searchProfit.setBackground(new java.awt.Color(0, 0, 0));
    button_searchProfit.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    button_searchProfit.setForeground(new java.awt.Color(204, 204, 204));
    button_searchProfit.setText("Search Profit");
    button_searchProfit.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            button_searchProfitActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
            .addContainerGap(23, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(field_searchProfit, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(button_searchProfit, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel5))
            .addGap(19, 19, 19))
    );
    jPanel4Layout.setVerticalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addGap(26, 26, 26)
            .addComponent(jLabel5)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
            .addComponent(field_searchProfit, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(43, 43, 43)
            .addComponent(button_searchProfit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(37, 37, 37))
    );

    jPanel5.setBackground(new java.awt.Color(255, 153, 102));
    jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

    jLabel7.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
    jLabel7.setText("Search Based on Cuisine");

    combo_searchCuisine.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    combo_searchCuisine.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select Cuisine-", "Chinese", "French", "Italian", "Japanese", "Indian", "Continental", "Nepalese" }));

    button_searchCuisine.setBackground(new java.awt.Color(0, 0, 0));
    button_searchCuisine.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    button_searchCuisine.setForeground(new java.awt.Color(204, 204, 204));
    button_searchCuisine.setText("Search Cuisine");
    button_searchCuisine.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            button_searchCuisineActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addGap(18, 18, 18)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(button_searchCuisine, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(combo_searchCuisine, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(18, Short.MAX_VALUE))
    );
    jPanel5Layout.setVerticalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addGap(24, 24, 24)
            .addComponent(jLabel7)
            .addGap(28, 28, 28)
            .addComponent(combo_searchCuisine, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(40, 40, 40)
            .addComponent(button_searchCuisine, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(40, Short.MAX_VALUE))
    );

    jPanel6.setBackground(new java.awt.Color(255, 153, 102));
    jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

    button_generateReport.setBackground(new java.awt.Color(0, 0, 0));
    button_generateReport.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
    button_generateReport.setForeground(new java.awt.Color(204, 204, 204));
    button_generateReport.setText("GenerateReport");
    button_generateReport.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            button_generateReportActionPerformed(evt);
        }
    });

    jLabel6.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
    jLabel6.setText("Generate Report");

    javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
    jPanel6.setLayout(jPanel6Layout);
    jPanel6Layout.setHorizontalGroup(
        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
            .addContainerGap(45, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(button_generateReport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(52, 52, 52))
    );
    jPanel6Layout.setVerticalGroup(
        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
            .addGap(25, 25, 25)
            .addComponent(jLabel6)
            .addGap(59, 59, 59)
            .addComponent(button_generateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(65, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout panel_viewRecordsLayout = new javax.swing.GroupLayout(panel_viewRecords);
    panel_viewRecords.setLayout(panel_viewRecordsLayout);
    panel_viewRecordsLayout.setHorizontalGroup(
        panel_viewRecordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panel_viewRecordsLayout.createSequentialGroup()
            .addGap(34, 34, 34)
            .addGroup(panel_viewRecordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(panel_viewRecordsLayout.createSequentialGroup()
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(41, 41, 41)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(32, 32, 32)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(40, Short.MAX_VALUE))
    );
    panel_viewRecordsLayout.setVerticalGroup(
        panel_viewRecordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panel_viewRecordsLayout.createSequentialGroup()
            .addGap(32, 32, 32)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(26, 26, 26)
            .addGroup(panel_viewRecordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(57, Short.MAX_VALUE))
    );

    jTabbedPane.addTab("Information", panel_viewRecords);

    panel_Container.add(jTabbedPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, -30, 879, 630));

    menu_File.setText("File");

    menuItem_Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
    menuItem_Save.setText("Save");
    menuItem_Save.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            menuItem_SaveActionPerformed(evt);
        }
    });
    menu_File.add(menuItem_Save);

    menuItem_Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
    menuItem_Open.setText("Open");
    menuItem_Open.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            menuItem_OpenActionPerformed(evt);
        }
    });
    menu_File.add(menuItem_Open);

    menuItem_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
    menuItem_Exit.setText("Exit");
    menuItem_Exit.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            menuItem_ExitActionPerformed(evt);
        }
    });
    menu_File.add(menuItem_Exit);

    jMenuBar1.add(menu_File);

    menu_Help.setText("Help");
    menu_Help.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            menu_HelpMouseClicked(evt);
        }
    });
    jMenuBar1.add(menu_Help);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(panel_Container, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(panel_Container, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_LoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_LoginActionPerformed
        // Getting input value from textfields
        String inpUsername = field_Username.getText();
        String inpPassword = field_Password.getText();

        // Reseting the lables showind invalid username/password to invisible
        login_InvalidUsername.setVisible(false);
        login_InvalidPassword.setVisible(false);

        // If username and password matches, then program loads another panel (add)
        if (inpUsername.equals("admin") && inpPassword.equals("admin")) {
            // Enabling menu items
            menuItem_Open.setEnabled(true);
            menuItem_Save.setEnabled(true);

            // Reseting values of input field
            field_Username.setText("Enter Username");
            field_Password.setText("Enter Password");

            // Switching Panel (using tabbed panel index)
            button_loadRecords.setEnabled(true);
            button_LoadInformation.setEnabled(true);
            jTabbedPane.setSelectedIndex(1);
        } // If username matches but password does not match, shows invalid password via label
        else if (inpUsername.equals("admin") && inpPassword.equals("admin") == false) {
            login_InvalidPassword.setVisible(true);
        } // If username does not match, shows invalid username via label
        else if (inpUsername.equals("admin") == false) {
            login_InvalidUsername.setVisible(true);
//         login_InvalidPassword.setVisible(true); 
        }
    }//GEN-LAST:event_button_LoginActionPerformed

    private void button_LoginMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button_LoginMouseEntered
        //Button hover affect start
        button_Login.setBackground(Color.white);
        button_Login.setForeground(Color.black);
    }//GEN-LAST:event_button_LoginMouseEntered

    private void button_LoginMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button_LoginMouseExited
        //Button hover affect end
        button_Login.setBackground(Color.black);
        button_Login.setForeground(Color.white);
    }//GEN-LAST:event_button_LoginMouseExited

    private void field_UsernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_field_UsernameFocusGained
        //Removing default text which serves as a placeholder when textfield is focused/clicked
        if (field_Username.getText().equals("Enter Username")) {
            field_Username.setText("");
        }
    }//GEN-LAST:event_field_UsernameFocusGained

    private void field_PasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_field_PasswordFocusGained
        //Removing default text which serves as a placeholder when textfield is focused/clicked
        if (field_Password.getText().equals("Enter Password")) {
            field_Password.setText("");
        }
    }//GEN-LAST:event_field_PasswordFocusGained

    private void menuItem_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuItem_ExitActionPerformed

    private void menuItem_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_OpenActionPerformed
        importFromTxt();
    }//GEN-LAST:event_menuItem_OpenActionPerformed

    private void button_addToTable1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_addToTable1ActionPerformed

        // Getting data from input fields, radio buttons and combobox
        String ID = field_addID.getText();
        String Location = field_addLocation.getText();
        String Cuisine = String.valueOf(combo_addCuisine.getSelectedItem());
        String Income = field_addIncome.getText();
        String Expenses = field_addExpenses.getText();

        // Calling method to validate input data
        boolean isValid = validateInput_add(ID, Location, Cuisine, Income, Expenses);

        // Calling method to insert values into table if input is valid
        if (isValid) {
            insertIntoTable(ID, Location, Cuisine, Income, Expenses);
        }
    }//GEN-LAST:event_button_addToTable1ActionPerformed

    private void radio_add1StarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_add1StarActionPerformed
        Rating = "1_Star";
    }//GEN-LAST:event_radio_add1StarActionPerformed

    private void radio_add2StarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_add2StarActionPerformed
        Rating = "2_Star";
    }//GEN-LAST:event_radio_add2StarActionPerformed

    private void radio_add3StarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_add3StarActionPerformed
        Rating = "3_Star";
    }//GEN-LAST:event_radio_add3StarActionPerformed

    private void radio_add4StarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_add4StarActionPerformed
        Rating = "4_Star";
    }//GEN-LAST:event_radio_add4StarActionPerformed

    private void radio_add5StarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_add5StarActionPerformed
        Rating = "5_Star";
    }//GEN-LAST:event_radio_add5StarActionPerformed

    private void button_clearFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_clearFieldsActionPerformed
        // Clearing out input fields, radio buttons, combobox
        Rating = "";
        buttonGroup_addRating.clearSelection();
        field_addID.setText("");
        field_addLocation.setText("");
        combo_addCuisine.setSelectedIndex(0);
        field_addExpenses.setText("");
        field_addIncome.setText("");
    }//GEN-LAST:event_button_clearFieldsActionPerformed

    private void menuItem_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_SaveActionPerformed
        exportToTxt();
    }//GEN-LAST:event_menuItem_SaveActionPerformed

    private void button_exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_exportActionPerformed
        exportToTxt();
    }//GEN-LAST:event_button_exportActionPerformed

    private void button_LoadInformationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_LoadInformationActionPerformed
        // Switching Panel (using tabbed panel index)
        jTabbedPane.setSelectedIndex(2);

        // Disabling menu items on Information page (can only access on records page)
        menuItem_Open.setEnabled(false);
        menuItem_Save.setEnabled(false);
    }//GEN-LAST:event_button_LoadInformationActionPerformed

    private void button_loadLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_loadLoginActionPerformed
        // Switching Panel (using tabbed panel index)
        jTabbedPane.setSelectedIndex(0);

        // Disabling buttons until logged in 
        button_loadRecords.setEnabled(false);
        button_LoadInformation.setEnabled(false);

        // Disabling menu items on login page
        menuItem_Open.setEnabled(false);
        menuItem_Save.setEnabled(false);
    }//GEN-LAST:event_button_loadLoginActionPerformed

    private void button_loadRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_loadRecordsActionPerformed
        // Switching Panel (using tabbed panel index)
        jTabbedPane.setSelectedIndex(1);

        // Enabling menu items on Records page
        menuItem_Open.setEnabled(true);
        menuItem_Save.setEnabled(true);
    }//GEN-LAST:event_button_loadRecordsActionPerformed

    private void button_loadLoginMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button_loadLoginMouseEntered
        //Button hover affect start
        button_loadLogin.setBackground(Color.white);
        button_loadLogin.setForeground(Color.black);
    }//GEN-LAST:event_button_loadLoginMouseEntered

    private void button_loadLoginMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button_loadLoginMouseExited
        //Button hover affect end
        button_loadLogin.setBackground(Color.black);
        button_loadLogin.setForeground(Color.white);
    }//GEN-LAST:event_button_loadLoginMouseExited

    private void button_loadRecordsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button_loadRecordsMouseEntered
        //Button hover affect start
        button_loadRecords.setBackground(Color.white);
        button_loadRecords.setForeground(Color.black);
    }//GEN-LAST:event_button_loadRecordsMouseEntered

    private void button_loadRecordsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button_loadRecordsMouseExited
        //Button hover affect end
        button_loadRecords.setBackground(Color.black);
        button_loadRecords.setForeground(Color.white);
    }//GEN-LAST:event_button_loadRecordsMouseExited

    private void button_LoadInformationMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button_LoadInformationMouseEntered
        //Button hover affect start
        button_LoadInformation.setBackground(Color.white);
        button_LoadInformation.setForeground(Color.black);
    }//GEN-LAST:event_button_LoadInformationMouseEntered

    private void button_LoadInformationMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button_LoadInformationMouseExited
        //Button hover affect end
        button_LoadInformation.setBackground(Color.black);
        button_LoadInformation.setForeground(Color.white);
    }//GEN-LAST:event_button_LoadInformationMouseExited

    private void button_searchProfitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_searchProfitActionPerformed
        // CODE for searching based on profit
        Profit_sortBySelection();

        // Calling binary search function
        int start = 0;
        int end = table_restaurantDetails.getRowCount() - 1;
        String search = field_searchProfit.getText();
        int resultIndex = Profit_searchByBinary(search, start, end);

        if (resultIndex == -1) {
            //Popup Window For Showing Search Not Found
            String invalidMessage = "Search criteria of profit does not match with any of the records \nGo to Records Page and refer to profit value";
            JOptionPane inputInvalid = new JOptionPane();
            inputInvalid.showMessageDialog(this, invalidMessage, "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String matchedID = String.valueOf(table_restaurantDetails.getValueAt(resultIndex, 0));
            String matchedLocation = String.valueOf(table_restaurantDetails.getValueAt(resultIndex, 1));
            String matchedRating = String.valueOf(table_restaurantDetails.getValueAt(resultIndex, 2));
            String matchedCuisine = String.valueOf(table_restaurantDetails.getValueAt(resultIndex, 3));
            String matchedIncome = String.valueOf(table_restaurantDetails.getValueAt(resultIndex, 4));
            String matchedExpenses = String.valueOf(table_restaurantDetails.getValueAt(resultIndex, 5));
            String matchedProfit = String.valueOf(table_restaurantDetails.getValueAt(resultIndex, 6));
//            String matchedRecord = matchedID + "%15s" + matchedLocation + "        " + matchedRating + "        " + matchedCuisine + "        " + matchedIncome + "        " + matchedExpenses + "        " + matchedProfit;
//            String columnTitle = "ID" + "             " +  "Location" + "             " + "Rating" + "             " + "Cuisine" + "          " + "Income" + "          " + "Expenses" + "          " + "Profit";

            String columnTitle = "ID" + String.format("%" + 25 + "s", "Location") + String.format("%" + 20 + "s", "Rating") + String.format("%" + 23 + "s", "Cuisine") + String.format("%" + 15 + "s", "Income") + String.format("%" + 20 + "s", "Expenses") + String.format("%" + 20 + "s", "Profit");
            String matchedRecord = matchedID + String.format("%" + 20 + "s", matchedLocation) + String.format("%" + 20 + "s", matchedRating) + String.format("%" + 20 + "s", matchedCuisine) + String.format("%" + 20 + "s", matchedIncome) + String.format("%" + 20 + "s", matchedExpenses) + String.format("%" + 20 + "s", matchedProfit);

            // Aligning list to center
            DefaultListCellRenderer renderer = (DefaultListCellRenderer) list_report.getCellRenderer();
            renderer.setHorizontalAlignment(SwingConstants.CENTER);

            label_reportTitle.setText("Matching Record");
            String[] list = {columnTitle, matchedRecord};
            list_report.setListData(list);
            JOptionPane.showMessageDialog(this, columnTitle + "\n" + matchedRecord);
        }
    }//GEN-LAST:event_button_searchProfitActionPerformed

    private void button_searchCuisineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_searchCuisineActionPerformed

        //Displays all matching records   
        Cuisine_sortBySelection();

        String selectedOption = String.valueOf(combo_searchCuisine.getSelectedItem());
        ArrayList<Integer> resultIndexList = new ArrayList<Integer>();
        ArrayList<String> matchedRecord = new ArrayList<String>();
        resultIndexList = LinearSearch(selectedOption, 3); //column 3 has cuisine

        if (resultIndexList.size() == 0) {
            //Popup Window For Showing Search Not Found
            String invalidMessage = "Cuisine does not exists in table. Refer to records page for cuisine values";
            JOptionPane inputInvalid = new JOptionPane();
            inputInvalid.showMessageDialog(this, invalidMessage, "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String popupMessage = "";
            String columnTitle = columnTitle = "ID" + String.format("%" + 25 + "s", "Location") + String.format("%" + 20 + "s", "Rating") + String.format("%" + 23 + "s", "Cuisine") + String.format("%" + 15 + "s", "Income") + String.format("%" + 20 + "s", "Expenses") + String.format("%" + 20 + "s", "Profit");
            DefaultListModel listModel = new DefaultListModel();
            listModel.addElement(columnTitle);

            for (int i = 0; i < resultIndexList.size(); i++) {
                String matchedID = String.valueOf(table_restaurantDetails.getValueAt(resultIndexList.get(i), 0));
                String matchedLocation = String.valueOf(table_restaurantDetails.getValueAt(resultIndexList.get(i), 1));
                String matchedRating = String.valueOf(table_restaurantDetails.getValueAt(resultIndexList.get(i), 2));
                String matchedCuisine = String.valueOf(table_restaurantDetails.getValueAt(resultIndexList.get(i), 3));
                String matchedIncome = String.valueOf(table_restaurantDetails.getValueAt(resultIndexList.get(i), 4));
                String matchedExpenses = String.valueOf(table_restaurantDetails.getValueAt(resultIndexList.get(i), 5));
                String matchedProfit = String.valueOf(table_restaurantDetails.getValueAt(resultIndexList.get(i), 6));

                String Record = matchedID + String.format("%" + 20 + "s", matchedLocation) + String.format("%" + 20 + "s", matchedRating) + String.format("%" + 20 + "s", matchedCuisine) + String.format("%" + 20 + "s", matchedIncome) + String.format("%" + 20 + "s", matchedExpenses) + String.format("%" + 20 + "s", matchedProfit);

                listModel.addElement(Record);
                list_report.setModel(listModel);

                popupMessage = popupMessage + Record + "\n";
            }

            JOptionPane.showMessageDialog(this, columnTitle + "\n" + popupMessage);

            DefaultListCellRenderer renderer = (DefaultListCellRenderer) list_report.getCellRenderer();
            renderer.setHorizontalAlignment(SwingConstants.CENTER);
        }
    }//GEN-LAST:event_button_searchCuisineActionPerformed

    private void menu_HelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_HelpMouseClicked

        try {
            File file = new File("../CloverRestaurantIS-UserManual.pdf");
            if (file.exists()) {
                if (Desktop.isDesktopSupported()) {
                    Desktop.getDesktop().open(file);
                } else {
                    JOptionPane.showMessageDialog(this, "File is not supported");
                }
            } else {
                JOptionPane.showMessageDialog(this, "File does not exist");
            }
        } catch (Exception e) {
            //Popup Window For Error When Opening PDF User Manual
            String invalidMessage = "Could not open file";
            JOptionPane inputInvalid = new JOptionPane();
            inputInvalid.showMessageDialog(this, invalidMessage, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menu_HelpMouseClicked

    private void button_generateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_generateReportActionPerformed

        Float totalIncome = 0.0f;
        Float totalExpenses = 0.0f;
        Float totalProfit = 0.0f;
        int maxIncomeIndex = 0;
        int minIncomeIndex = 0;
        int maxExpensesIndex = 0;
        int minExpensesIndex = 0;
        int maxProfitableIndex = 0;
        int minProfitableIndex = 0;
        String maxIncomeRecord = "";
        String minIncomeRecord = "";
        String maxExpensesRecord = "";
        String minExpensesRecord = "";
        String maxProfitRecord = "";
        String minProfitRecord = "";

        int row = table_restaurantDetails.getRowCount();
        int column = table_restaurantDetails.getColumnCount();
        
        //To Check if table is empty (using income cell as indication)
        try {
            Float check = Float.parseFloat(String.valueOf(table_restaurantDetails.getValueAt(0, 4)));
        } catch (Exception e) {
            //Popup Window For Showing Emty table error for report generation
            String invalidMessage = "Table has no records. Add import or add some records in order to generate report ";
            JOptionPane inputInvalid = new JOptionPane();
            inputInvalid.showMessageDialog(this, invalidMessage, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        for (int i = 0; i < row; i++) {

            Float incomeCurrent = Float.parseFloat(String.valueOf(table_restaurantDetails.getValueAt(i, 4)));
            Float expensesCurrent = Float.parseFloat(String.valueOf(table_restaurantDetails.getValueAt(i, 5)));
            Float profitCurrent = Float.parseFloat(String.valueOf(table_restaurantDetails.getValueAt(i, 6)));

            Float incomeMax = Float.parseFloat(String.valueOf(table_restaurantDetails.getValueAt(maxIncomeIndex, 4)));
            Float incomeMin = Float.parseFloat(String.valueOf(table_restaurantDetails.getValueAt(minIncomeIndex, 4)));

            Float expensesMax = Float.parseFloat(String.valueOf(table_restaurantDetails.getValueAt(maxExpensesIndex, 5)));
            Float expensesMin = Float.parseFloat(String.valueOf(table_restaurantDetails.getValueAt(minExpensesIndex, 5)));

            Float profitMax = Float.parseFloat(String.valueOf(table_restaurantDetails.getValueAt(maxProfitableIndex, 6)));
            Float profitMin = Float.parseFloat(String.valueOf(table_restaurantDetails.getValueAt(minProfitableIndex, 6)));

            //Calculating Total Income, Expenses, Profit
            totalIncome += Float.parseFloat(String.valueOf(table_restaurantDetails.getValueAt(i, 4)));
            totalExpenses += Float.parseFloat(String.valueOf(table_restaurantDetails.getValueAt(i, 5)));
            totalProfit += profitCurrent;

            //Calculating Most Generated Income
            if (Float.compare(incomeCurrent, incomeMax) > 0) {
                maxIncomeIndex = i;
            } //Calculating Least Generated Income
            else if (Float.compare(incomeCurrent, incomeMin) < 0) {
                minIncomeIndex = i;
            }

            //Calculating Most Expenses
            if (Float.compare(expensesCurrent, expensesMax) > 0) {
                maxExpensesIndex = i;
            } //Calculating Least Expenses
            else if (Float.compare(expensesCurrent, expensesMin) < 0) {
                minExpensesIndex = i;
            }

            //Calculating Most Profitable
            if (Float.compare(profitCurrent, profitMax) > 0) {
                maxProfitableIndex = i;
            } //Calculating Least Profitable
            else if (Float.compare(profitCurrent, profitMin) < 0) {
                minProfitableIndex = i;
            }
        }

        //Arranging Report
        for (int col = 0; col < column; col++) {
            maxIncomeRecord += table_restaurantDetails.getValueAt(maxIncomeIndex, col) + "     ";
            minIncomeRecord += table_restaurantDetails.getValueAt(minIncomeIndex, col) + "     ";
            maxExpensesRecord += table_restaurantDetails.getValueAt(maxExpensesIndex, col) + "     ";
            minExpensesRecord += table_restaurantDetails.getValueAt(minExpensesIndex, col) + "     ";
            maxProfitRecord += table_restaurantDetails.getValueAt(maxProfitableIndex, col) + "     ";
            minProfitRecord += table_restaurantDetails.getValueAt(minProfitableIndex, col) + "     ";
        }

        // Aligning list to center
        DefaultListCellRenderer renderer = (DefaultListCellRenderer) list_report.getCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);

        label_reportTitle.setText("Generated Report");
        String columnTitle = "Description" + String.format("%" + 10 + "s", "ID") + String.format("%" + 14 + "s", "Location") + String.format("%" + 12 + "s", "Rating") + String.format("%" + 12 + "s", "Cuisine") + String.format("%" + 12 + "s", "Income") + String.format("%" + 12 + "s", "Expenses") + String.format("%" + 12 + "s", "Profit");
        String[] list = {columnTitle, "Max Income :     " + maxIncomeRecord, "Min Income :     " + minIncomeRecord, "Max Expense :    " + maxExpensesRecord, "Min Expense :    " + minExpensesRecord, "Max Profit :      " + maxProfitRecord, "Min Profit :      " + minProfitRecord};
        list_report.setListData(list);
    }//GEN-LAST:event_button_generateReportActionPerformed

    //Method to Validate input data (before inserting into table)
    private boolean validateInput_add(String id, String location, String cuisine, String income, String expenses) {
        // Flag variable to indicate if input is valid or not
        boolean isValid = true;

        // Checking if fields are empty or default
        if (id.equals("") || location.equals("") || cuisine.equals("-Select Cuisine-") || income.equals("") || expenses.equals("") || Rating.equals("")) {
            isValid = false;
            // Popup Window For Verification Error
            String invalidMessage = "Input data cannot be empty";
            JOptionPane inputInvalid = new JOptionPane();
            inputInvalid.showMessageDialog(this, invalidMessage, "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Check for exception (amount in string)
            try {
                Float floatIncome = Float.parseFloat(income);
                Float floatExpense = Float.parseFloat(expenses);

                // Checking if income or expense is less than 0 (they both cannot be negative)
                if (floatIncome < 0 || floatExpense < 0) {
                    isValid = false;
                    // Popup Window For Verification Error
                    String invalidMessage = "Income and Expenses cannot be negative";
                    JOptionPane inputInvalid = new JOptionPane();
                    inputInvalid.showMessageDialog(this, invalidMessage, "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (Exception e) {
                isValid = false;
                // Popup Window For Verification Error
                String invalidMessage = "Income and Expenses should be numeric value";
                JOptionPane inputInvalid = new JOptionPane();
                inputInvalid.showMessageDialog(this, invalidMessage, "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        // Checking if id already exists (checking for dupliccate id)
        int row = table_restaurantDetails.getRowCount();
        // Maybe call binary search function to check for duplication
        ArrayList<Integer> matchingIndexList = new ArrayList<Integer>();
        matchingIndexList = LinearSearch(id, 0); //column 0 has id

        // If searched id matches, it means that the record already exists and thus is flagged as invalid
        if (matchingIndexList.size() != 0) {
            // Popup Window For Verification Error
            String invalidMessage = "ID already exists, cannot add duplicate data";
            JOptionPane inputInvalid = new JOptionPane();
            inputInvalid.showMessageDialog(this, invalidMessage, "Error", JOptionPane.ERROR_MESSAGE);
            isValid = false;
        }

        return isValid;
    }
    
    // Method to Insert values into table
    private void insertIntoTable(String id, String location, String cuisine, String income, String expenses) {
        DefaultTableModel tableModel = (DefaultTableModel) table_restaurantDetails.getModel();

        //Converting Income, Expenses to float then calculating profit
        Float profit = Float.parseFloat(income) - Float.parseFloat(expenses);
        // Inserting Values to Table
        int rowCount = table_restaurantDetails.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String firstRowValue = (String) table_restaurantDetails.getValueAt(i, 0);

            // If table is full, increases row and adds record to table
            if (rowCount - 1 == i && firstRowValue != null) {
                tableModel.setRowCount(rowCount + 1);
                table_restaurantDetails.setValueAt(id, i + 1, 0);
                table_restaurantDetails.setValueAt(location, i + 1, 1);
                table_restaurantDetails.setValueAt(Rating, i + 1, 2);
                table_restaurantDetails.setValueAt(cuisine, i + 1, 3);
                table_restaurantDetails.setValueAt(income, i + 1, 4);
                table_restaurantDetails.setValueAt(expenses, i + 1, 5);
                table_restaurantDetails.setValueAt(profit, i + 1, 6);
                return;
            }

            // If First value is empty, adds record to table
            if (firstRowValue == null || firstRowValue == "") {

                table_restaurantDetails.setValueAt(id, i, 0);
                table_restaurantDetails.setValueAt(location, i, 1);
                table_restaurantDetails.setValueAt(Rating, i, 2);
                table_restaurantDetails.setValueAt(cuisine, i, 3);
                table_restaurantDetails.setValueAt(income, i, 4);
                table_restaurantDetails.setValueAt(expenses, i, 5);
                table_restaurantDetails.setValueAt(profit, i, 6);
                return;
            }
        }
    }
    
    // Method to sort price by Selection Sort method (Descending)
    private void Profit_sortBySelection() {

        int row = table_restaurantDetails.getRowCount();
        Float currentValue = 0.0f;
        Float nextValue = 0.0f;

        for (int i = 0; i < row; i++) {
            int minIndex = i;
            for (int j = i + 1; j < row; j++) {
                currentValue = Float.parseFloat(String.valueOf(table_restaurantDetails.getValueAt(minIndex, 6)));
                nextValue = Float.parseFloat(String.valueOf(table_restaurantDetails.getValueAt(j, 6)));
                if (Float.compare(nextValue, currentValue) < 0) {
                    minIndex = j;
                }
            }
            // Only swap if minIndex is changed
            if (minIndex != i) {
                // Swap entire row (n = column counter)
                for (int n = 0; n < 7; n++) {
                    String temp = String.valueOf(table_restaurantDetails.getValueAt(i, n));
                    table_restaurantDetails.setValueAt(table_restaurantDetails.getValueAt(minIndex, n), i, n);
                    table_restaurantDetails.setValueAt(temp, minIndex, n);
                }
            }
        }
    }

    // Method to sort Cuisine by Selection Sort method (Descending)
    private void Cuisine_sortBySelection() {

        int row = table_restaurantDetails.getRowCount();
        String currentValue = "";
        String nextValue = "";

        for (int i = 0; i < row; i++) {
            int minIndex = i;
            for (int j = i + 1; j < row; j++) {
                currentValue = String.valueOf(table_restaurantDetails.getValueAt(minIndex, 3));
                nextValue = String.valueOf(table_restaurantDetails.getValueAt(j, 3));
                if (nextValue.compareTo(currentValue) < 0) {
                    minIndex = j;
                }
            }
            // Only swap if minIndex is changed
            if (minIndex != i) {
                // Swap entire row (n = column counter)
                for (int n = 0; n < 7; n++) {
                    String temp = String.valueOf(table_restaurantDetails.getValueAt(i, n));
                    table_restaurantDetails.setValueAt(table_restaurantDetails.getValueAt(minIndex, n), i, n);
                    table_restaurantDetails.setValueAt(temp, minIndex, n);
                }
            }
        }
    }

    //Method to search Profit using binayr search algorithm
    private int Profit_searchByBinary(String search, int start, int end) {

        // Binary Search
        int resultIndex = -1;
        Float searchFloat = 0.0f;

        try {
            searchFloat = Float.parseFloat(search);
        } catch (Exception e) {
            //
        }

        while (start <= end) {
            int mid = (start + end) / 2;
            Float cellValue = Float.parseFloat(String.valueOf(table_restaurantDetails.getValueAt(mid, 6)));
            if (Float.compare(searchFloat, cellValue) == 0) {
                resultIndex = mid;
                break;
            } else if (Float.compare(searchFloat, cellValue) < 0) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return resultIndex;
    }

    // Linear search for searching cuisine and validating table entry for duplication
    private ArrayList<Integer> LinearSearch(String search, int columnIndex) {

        // Binary Search
        ArrayList<Integer> matchedIndexList = new ArrayList<Integer>();

        for (int i = 0; i < table_restaurantDetails.getRowCount(); i++) {

            String cellValue = String.valueOf(table_restaurantDetails.getValueAt(i, columnIndex));

            if (search.equals(cellValue)) {
                matchedIndexList.add(i);
            }
        }

        return matchedIndexList;
    }
    
    // Importing data from Text File
    private void importFromTxt() {

        File file = new File("../CloverRestaurantRecord.txt");

        try {
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);

            DefaultTableModel model = (DefaultTableModel) table_restaurantDetails.getModel();
            Object[] lines = br.lines().toArray();

            model.setRowCount(0);
            for (int i = 0; i < lines.length; i++) {
                String[] row = lines[i].toString().split(" ");
                model.addRow(row);
            }

            // Popup Window Notifying user of import success
            JOptionPane msgSuccess = new JOptionPane();
            msgSuccess.showMessageDialog(this, "Successfully Imported");

        } catch (FileNotFoundException ex) {
            Logger.getLogger(restaurantInfo.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Exporting table records to excel
    private void exportToTxt() {
        boolean emptyRecords = false;
        File file = new File("../CloverRestaurantRecord.txt");
        try {
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);

            for (int i = 0; i < table_restaurantDetails.getRowCount(); i++) {
                String firstRowValue = (String) table_restaurantDetails.getValueAt(i, 0);
                for (int j = 0; j < table_restaurantDetails.getColumnCount(); j++) {
                    if (firstRowValue == null || firstRowValue.equals("")) {
                        emptyRecords = true;
                        break;
                    } else {
                        bw.write(table_restaurantDetails.getValueAt(i, j).toString() + " ");
                    }
                }
                if (!emptyRecords) {
                    bw.newLine();
                }
            }

            bw.close();
            fw.close();

            // Popup Window Notifying user of import success
            JOptionPane msgSuccess = new JOptionPane();
            msgSuccess.showMessageDialog(this, "Successfully Exported");

        } catch (IOException ex) {
            // Popup Window For Error When Exporting
            String invalidMessage = "Could not export file";
            JOptionPane inputInvalid = new JOptionPane();
            inputInvalid.showMessageDialog(this, invalidMessage, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(restaurantInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(restaurantInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(restaurantInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(restaurantInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new restaurantInfo().setVisible(true);
            }
        });

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(restaurantInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(restaurantInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(restaurantInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(restaurantInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        //CODE
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_addRating;
    private javax.swing.JButton button_LoadInformation;
    private javax.swing.JButton button_Login;
    private javax.swing.JButton button_addToTable1;
    private javax.swing.JButton button_clearFields;
    private javax.swing.JButton button_export;
    private javax.swing.JButton button_generateReport;
    private javax.swing.JButton button_loadLogin;
    private javax.swing.JButton button_loadRecords;
    private javax.swing.JButton button_searchCuisine;
    private javax.swing.JButton button_searchProfit;
    private javax.swing.JComboBox<String> combo_addCuisine;
    private javax.swing.JComboBox<String> combo_searchCuisine;
    private javax.swing.JTextField field_Password;
    private javax.swing.JTextField field_Username;
    private javax.swing.JTextField field_addExpenses;
    private javax.swing.JTextField field_addID;
    private javax.swing.JTextField field_addIncome;
    private javax.swing.JTextField field_addLocation;
    private javax.swing.JTextField field_searchProfit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JLabel label_addCuisine;
    private javax.swing.JLabel label_addExpenses;
    private javax.swing.JLabel label_addID;
    private javax.swing.JLabel label_addIncome;
    private javax.swing.JLabel label_addLocation1;
    private javax.swing.JLabel label_addRating;
    private javax.swing.JLabel label_loginDescription;
    private javax.swing.JLabel label_reportTitle;
    private javax.swing.JList<String> list_report;
    private javax.swing.JLabel login_InvalidPassword;
    private javax.swing.JLabel login_InvalidUsername;
    private javax.swing.JMenuItem menuItem_Exit;
    private javax.swing.JMenuItem menuItem_Open;
    private javax.swing.JMenuItem menuItem_Save;
    private javax.swing.JMenu menu_File;
    private javax.swing.JMenu menu_Help;
    private javax.swing.JPanel panel_Container;
    private javax.swing.JPanel panel_Login;
    private javax.swing.JPanel panel_Menu;
    private javax.swing.JPanel panel_addRecords;
    private javax.swing.JPanel panel_viewRecords;
    private javax.swing.JRadioButton radio_add1Star;
    private javax.swing.JRadioButton radio_add2Star;
    private javax.swing.JRadioButton radio_add3Star;
    private javax.swing.JRadioButton radio_add4Star;
    private javax.swing.JRadioButton radio_add5Star;
    private javax.swing.JPanel subPanel_Login;
    private javax.swing.JTable table_restaurantDetails;
    // End of variables declaration//GEN-END:variables
}
